`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 08/03/2021 08:46:43 PM
// Design Name: 
// Module Name: Miner
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

/*
TODO:
	Replace integers for reg
	Combine hashValues and oldHashValues into array
	Create target check
	Improve Choice, Majority, and Right Shift operations

*/

module Miner(
	input clk,
	output out);
	//reg clk;
	reg done;
	reg [31:0] count;
	reg [639:0] header1, header2;
	reg [255:0] hashValues = 256'b0110101000001001111001100110011110111011011001111010111010000101001111000110111011110011011100101010010101001111111101010011101001010001000011100101001001111111100110110000010101101000100011000001111110000011110110011010101101011011111000001100110100011001;
	reg [2047:0] constantValues = 2048'b
	assign out = done;
	initial begin
	   count = 0;
	   done = 0;
	   header1 = 640'h0100000050120119172a610421a6c3011dd330d9df07b63616c2cc1f1cd00200000000006657a9252aacd5c0b2940996ecff952228c3067cc38d4885efb5a4ac4247e9f337221b4d4c86041b00000000;
	   header2 = header1; 
	   /*
	   clk = 0;
	   forever #10 clk=!clk;
	   */
	end
	Hash instance1(header1, hashValues, constantValues, status1);
	Hash instance2(header2, hashValues, constantValues, status2);
	always @ (posedge clk) begin
		if(count == 10000) done = 1;
		if(status1==1 & done==0) begin
		  count = count + 1;
		  header1[31:0] = {count[7:0],  count[15:8],  count[23:16],  count[31:24]};
		end
		else if(status2==1 & done==0) begin
		  count = count + 1;
		  header2[31:0] = {count[7:0],  count[15:8],  count[23:16],  count[31:24]};
		  end
		else done = 1;
	end
endmodule
